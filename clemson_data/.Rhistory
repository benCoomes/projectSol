datavalues <- data[[4]]
# seperate datavalues list into componet vectors
ids <- datavalues[["_id"]]
revs <- datavalues[["_rev"]]
fluxes <- datavalues[["flux"]]
lats <- datavalues[["y-coord"]]
lngs <- datavalues[["x-coord"]]
times <- datavalues[["timestamp"]]
# compose vectors into data frame
df <- data.frame(id=ids, rev=revs, flux=fluxes, lat=lats, lng=lngs, time=times)
# remove incomplete rows from the data frame
df <- df[complete.cases(df), ]
# remove rows with invalid coordinates from the dataframe, don't know why these have to be seperate
df <- df[(df$lat >= -90.0), ]
df <- df[(df$lat <= 90.00), ]
df <- df[(df$lng >= -180.0), ]
df <- df[(df$lng <= 180.0), ]
# make a vector with unique coordinates contained in df
ucoors <- data.frame(lng=df$lng, lat=df$lat) %>% unique()
ucoors
df
df <- df[(df$lng >= -180.0), ]
library(httr)
library(jsonlite)
item <- GET("https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com")
content(item, encoding = "UTF-8") #interesting, what this line does
jsonshit <- GET("https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com/clemson_data/_all_docs?include_docs=true",
authenticate("3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix", "70d0f1455b7dd050452faa5d3650f0907bb98cde87f61fcde0cf57dbca8e3d7e"))
#POST(url = "https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com/_session",
#     type = "application/x-www-form-urlencoded",
#     body = "name=3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com&password=70d0f1455b7dd050452faa5d3650f0907bb98cde87f61fcde0cf57dbca8e3d7e")
documents <- fromJSON(toString(content(jsonshit, as = "text" , encoding = "UTF-8")))
data <- documents[[3]]
# get data values from docuemt
datavalues <- data[[4]]
# seperate datavalues list into componet vectors
ids <- datavalues[["_id"]]
revs <- datavalues[["_rev"]]
fluxes <- datavalues[["flux"]]
lats <- datavalues[["y-coord"]]
lngs <- datavalues[["x-coord"]]
times <- datavalues[["timestamp"]]
# compose vectors into data frame
df <- data.frame(id=ids, rev=revs, flux=fluxes, lat=lats, lng=lngs, time=times)
# remove incomplete rows from the data frame
df <- df[complete.cases(df), ]
# remove rows with invalid coordinates from the dataframe, don't know why these have to be seperate
df <- df[(df$lat >= -90.0), ]
df <- df[(df$lat <= 90.00), ]
df <- df[(df$lng >= -180.0), ]
df <- df[(df$lng <= 180.0), ]
df
username <- "3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix"
password <- "70d0f1455b7dd050452faa5d3650f0907bb98cde87f61fcde0cf57dbca8e3d7e"
http <- "https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com/clemson_data/_all_docs?limit=20&include_docs=true"
#http <- "https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com/clemson_data/_all_docs?include_docs=true"
httpResponse <- GET(http, authenticate(username, password))
documents <- fromJSON(toString(content(httpResponse, as = "text" , encoding = "UTF-8")))
data <- documents[[3]]
datavalues <- data[[4]]
# seperate datavalues list into componet vectors
ids <- datavalues[["_id"]]
revs <- datavalues[["_rev"]]
fluxes <- datavalues[["flux"]]
lats <- datavalues[["y-coord"]]
lngs <- datavalues[["x-coord"]]
times <- datavalues[["timestamp"]]
# compose vectors into data frame
df <- data.frame(id=ids, rev=revs, flux=fluxes, lat=lats, lng=lngs, time=times)
# remove incomplete rows from the data frame
df <- df[complete.cases(df), ]
# remove rows with invalid coordinates from the dataframe, don't know why these have to be seperate
df <- df[(df$lat >= -90.0), ]
df <- df[(df$lat <= 90.00), ]
df <- df[(df$lng >= -180.0), ]
df <- df[(df$lng <= 180.0), ]
df
username <- "3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix"
password <- "70d0f1455b7dd050452faa5d3650f0907bb98cde87f61fcde0cf57dbca8e3d7e"
http <- "https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com/clemson_data/_all_docs?limit=20&include_docs=true"
#http <- "https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com/clemson_data/_all_docs?include_docs=true"
httpResponse <- GET(http, authenticate(username, password))
documents <- fromJSON(toString(content(httpResponse, as = "text" , encoding = "UTF-8")))
data <- documents[[3]]
datavalues <- data[[4]]
# seperate datavalues list into componet vectors
ids <- datavalues[["_id"]]
revs <- datavalues[["_rev"]]
fluxes <- datavalues[["flux"]]
lats <- datavalues[["y-coord"]]
lngs <- datavalues[["x-coord"]]
times <- datavalues[["timestamp"]]
# compose vectors into data frame
df <- data.frame(id=ids, rev=revs, flux=fluxes, lat=lats, lng=lngs, time=times)
# remove incomplete rows from the data frame
df <- df[complete.cases(df), ]
# remove rows with invalid coordinates from the dataframe, don't know why these have to be seperate
df
colormap <- leaflet(df) %>% addTiles()
runApp('R/clemson_data')
runApp('R/clemson_data')
runApp('R/clemson_data')
runApp('R/clemson_data')
runApp('R/clemson_data')
runApp('R/clemson_data')
library(chron)
chron
install.packages("chron")
library(chron)
? chron
head(df)
runApp('R/clemson_data')
username <- "3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix"
password <- "70d0f1455b7dd050452faa5d3650f0907bb98cde87f61fcde0cf57dbca8e3d7e"
http <- "https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com/clemson_data/_all_docs?limit=50&include_docs=true&descending=true"
#http <- "https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com/clemson_data/_all_docs?include_docs=true"
httpResponse <- GET(http, authenticate(username, password))
documents <- fromJSON(toString(content(httpResponse, as = "text" , encoding = "UTF-8")))
data <- documents[[3]]
datavalues <- data[[4]]
# seperate datavalues list into componet vectors
ids <- datavalues[["_id"]]
revs <- datavalues[["_rev"]]
fluxes <- datavalues[["flux"]]
lats <- datavalues[["y-coord"]]
lngs <- datavalues[["x-coord"]]
times <- datavalues[["timestamp"]]
# compose vectors into data frame
df <- data.frame(id=ids, rev=revs, flux=fluxes, lat=lats, lng=lngs, time=times)
# remove incomplete rows from the data frame
df <- df[complete.cases(df), ]
# remove rows with invalid coordinates from the dataframe, don't know why these have to be seperate
df <- df[(df$lat >= -90.0), ]
df <- df[(df$lat <= 90.00), ]
df <- df[(df$lng >= -180.0), ]
df <- df[(df$lng <= 180.0), ]
library(shiny)
library(httr)
library(jsonlite)
library(leaflet)
username <- "3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix"
password <- "70d0f1455b7dd050452faa5d3650f0907bb98cde87f61fcde0cf57dbca8e3d7e"
http <- "https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com/clemson_data/_all_docs?limit=50&include_docs=true&descending=true"
#http <- "https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com/clemson_data/_all_docs?include_docs=true"
httpResponse <- GET(http, authenticate(username, password))
documents <- fromJSON(toString(content(httpResponse, as = "text" , encoding = "UTF-8")))
data <- documents[[3]]
datavalues <- data[[4]]
# seperate datavalues list into componet vectors
ids <- datavalues[["_id"]]
revs <- datavalues[["_rev"]]
fluxes <- datavalues[["flux"]]
lats <- datavalues[["y-coord"]]
lngs <- datavalues[["x-coord"]]
times <- datavalues[["timestamp"]]
# compose vectors into data frame
df <- data.frame(id=ids, rev=revs, flux=fluxes, lat=lats, lng=lngs, time=times)
# remove incomplete rows from the data frame
df <- df[complete.cases(df), ]
# remove rows with invalid coordinates from the dataframe, don't know why these have to be seperate
df <- df[(df$lat >= -90.0), ]
df <- df[(df$lat <= 90.00), ]
df <- df[(df$lng >= -180.0), ]
df <- df[(df$lng <= 180.0), ]
typeof(df)
typeof(times)
df <- data.as.frame(df)
head(df)
head(df)
runApp('R/clemson_data')
runApp('R/clemson_data')
xvals <- c(1:10)
xvals
xvals <- c(0:10)
yvals <- factorial(xvals) * factorial(10 - xvals)
yvals
plot(x = xvals, y = yvals)
plot(x = xvals[2:9], y = yvals[2:9])
plot(x = xvals[3:9], y = yvals[3:9])
shiny::runApp('R/clemson_data')
runApp('R/clemson_data')
runApp('R/clemson_data')
runApp('R/clemson_data')
yvals
runApp('R/clemson_data')
library(httr)
library(httr)
library(jsonlite)
item <- GET("https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com")
content(item, encoding = "UTF-8") #interesting, what this line does
jsonshit <- GET("https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com/clemson_data/_all_docs?include_docs=true",
authenticate("3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix", "70d0f1455b7dd050452faa5d3650f0907bb98cde87f61fcde0cf57dbca8e3d7e"))
#POST(url = "https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com/_session",
#     type = "application/x-www-form-urlencoded",
#     body = "name=3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com&password=70d0f1455b7dd050452faa5d3650f0907bb98cde87f61fcde0cf57dbca8e3d7e")
documents <- fromJSON(toString(content(jsonshit, as = "text" , encoding = "UTF-8")))
data <- documents[[3]]
# get data values from docuemt
datavalues <- data[[4]]
# seperate datavalues list into componet vectors
ids <- datavalues[["_id"]]
revs <- datavalues[["_rev"]]
fluxes <- datavalues[["flux"]]
lats <- datavalues[["y-coord"]]
lngs <- datavalues[["x-coord"]]
times <- datavalues[["timestamp"]]
# compose vectors into data frame
df <- data.frame(id=ids, rev=revs, flux=fluxes, lat=lats, lng=lngs, time=times)
# remove incomplete rows from the data frame
df <- df[complete.cases(df), ]
# remove rows with invalid coordinates from the dataframe, don't know why these have to be seperate
df <- df[(df$lat >= -90.0), ]
df <- df[(df$lat <= 90.00), ]
df <- df[(df$lng >= -180.0), ]
df <- df[(df$lng <= 180.0), ]
summary(jsonshit)
typeof(jsonshit)
summary(documents)
summary(datavalues)
typeof(datavalues)
doeswork <- data.frame(datavalues[[,]])
library(plyr)
doeswork <- ldply(datavalues, data.frame)
summary(doeswork)
typeof(doesworj)
typeof(doeswork)
summary(datavalues)
summary(datavalues[["_id"]])
typeof(datavalues[[_"id"]])
typeof(datavalues[["_id"]])
charv <- "aolsdfhalsdkfjhnalsdkjfhasdf"
summary(charv)
charv <- c("aolsdfhalsdkfjhnalsdkjfhasdf", "alsdkfnj")
summary(charv)
doeswork <- data.frame(datavalues[[1]], datavalues[[2]], datavalues[[3]])
summary(does)
summary(doeswork)
typeof(doeswork)
summary(datavalues[[1]])
summary(datavalues[[2]])
summary(datavalues[[3]])
summary(datavalues[[4]])
length(datavalues[[4]])
length(datavalues[[5]])
summary(datavalues[[5]])
doeswork <- data.frame(datavalues[[4]], datavalues[[5])
doeswork <- data.frame(datavalues[[4]], datavalues[[5]])
typeof(doeswork)
summary(doeswork)
doeswork <- as.data.frame(datavalues)
summary(doeswork)
typeof(doeswork)
doeswork <- data.frame(datavalues[["_id"]], datavalues[["_rev"]])
summary(doeswork)
typeof(doeswork)
ids <- datavalues[["_id"]]
typeof(ids)
revs <- datavalues[["_rev"]]
typeof(rev)
doeswork <- as.data.frame(datavalues)
doeswork <- as.data.frame(datavalues)
summary(doeswork)
typeof(doeswork)
flux <- datavalues[["flux"]]
typeof(flux)
summary(flux)
head(flux)
doeswork <- data.frame(datavalues[["_id"]])
typeof(doeswork)
summary(doeswork)
head(doeswork)
doeswork <- data.frame(datavalues[[["_id"]])
doeswork <- data.frame(datavalues[[["_id"]]])
doeswork <- data.frame(datavalues["_id"])
head(doeswork)
summary(doeswork)
typeof(doeswork)
doeswork <- data.frame(datavalues[["_id"]])
doeswork <- data.frame(c("adsfad", "asdfasdaf"))
typeof(doeswork)
class(doeswork)
doeswork <- as.data.frame(datavalues)
class(doeswork)
source('~/R/clemson_data.R')
runApp('R/clemson_data')
runApp('R/clemson_data')
runApp('R/clemson_data')
runApp('R/clemson_data')
shiny::runApp('R/clemson_data')
runApp('R/clemson_data')
runApp('R/clemson_data')
runApp('R/clemson_data')
runApp('R/clemson_data')
runApp('R/clemson_data')
runApp('R/clemson_data')
source('~/R/clemson_data.R')
library(httr)
df <- df[(df$lng <= 180.0), ]
library(httr)
library(jsonlite)
library(plyr)
item <- GET("https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com")
content(item, encoding = "UTF-8") #interesting, what this line does
jsonshit <- GET("https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com/clemson_data/_all_docs?include_docs=true",
authenticate("3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix", "70d0f1455b7dd050452faa5d3650f0907bb98cde87f61fcde0cf57dbca8e3d7e"))
#POST(url = "https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com/_session",
#     type = "application/x-www-form-urlencoded",
#     body = "name=3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com&password=70d0f1455b7dd050452faa5d3650f0907bb98cde87f61fcde0cf57dbca8e3d7e")
documents <- fromJSON(toString(content(jsonshit, as = "text" , encoding = "UTF-8")))
data <- documents[[3]]
# get data values from docuemt
datavalues <- data[[4]]
# seperate datavalues list into componet vectors
ids <- datavalues[["_id"]]
revs <- datavalues[["_rev"]]
fluxes <- datavalues[["flux"]]
lats <- datavalues[["y-coord"]]
lngs <- datavalues[["x-coord"]]
times <- datavalues[["timestamp"]]
# compose vectors into data frame
df <- data.frame(id=ids, rev=revs, flux=fluxes, lat=lats, lng=lngs, time=times)
# remove incomplete rows from the data frame
df <- df[complete.cases(df), ]
# remove rows with invalid coordinates from the dataframe, don't know why these have to be seperate
df <- df[(df$lat >= -90.0), ]
df <- df[(df$lat <= 90.00), ]
df <- df[(df$lng >= -180.0), ]
df <- df[(df$lng <= 180.0), ]
head(df)
timevector <- as.date(df$time)
timevector <- as.Date(df$time)
head(timevector)
timevector <- chron(dates = df$time, time = df%time())
timevector <- chron(dates = df$time, time = df%time)
timevector <- chron(dates = df$time, times = df%time)
timevector <- chron(dates. = df$time, times. = df%time)
tms <- times(df$time)
tms <- as>Times(df$time)
tms <- as.Times(df$time)
tms <- as.Date(df$time)
tms
tdf$time
df$time
timevector <- strftime(df%time, format="%Y-%m-$d %H:%M%S")
timevector <- strftime(df%time, format="%Y-%m-$d %H:%M%S", tz = "")
timevector <- strftime(df%time, format="%Y-%m-%d %H:%M%S", tz = "")
source('~/R/clemson_data.R')
timevector <- strftime(df%time, format="%Y-%m-$d %H:%M%S", tz = "")
timevector <- strftime(df%time, format="%Y-%m-$d %H:%M%S", tz = "")
timevector <- strftime(df%time, format="%Y-%m-%d %H:%M:%S", tz = "")
timevector <- strftime(df%time, format = "", tz = "")
timevector <- strftime(df%time, tz = "")
timevector <- strftime(df%time)
df$time
timevector <- strftime(df$time, format="%Y-%m-$d %H:%M%S", tz = "")
timevector <- strftime(df$time, format="%Y-%m-%d %H:%M:%S", tz = "")
timevector <- strptime(df$time, format="%Y-%m-%d %H:%M:%S", tz = "")
timevector
typeof(timevector)
typeof(timevector[[1]])
(timevector[[1]])
tms <- strsplit(df$time, split = " ")
tms <- strsplit(df$time[1], split = " ")
tms <- strsplit(df$time, split = character(" "))
tms <- strsplit(df$time)
tms <- strsplit(df$time, " ")
typeof(df$time)
df$time
summary(df)
summary(df)
df$time
tms <- as.numeric(df$times)
tms
head(df%times)
head(df%time)
head(df$time)
library(httr)
library(jsonlite)
library(plyr)
item <- GET("https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com")
content(item, encoding = "UTF-8") #interesting, what this line does
jsonshit <- GET("https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com/clemson_data/_all_docs?include_docs=true",
authenticate("3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix", "70d0f1455b7dd050452faa5d3650f0907bb98cde87f61fcde0cf57dbca8e3d7e"))
library(httr)
library(jsonlite)
library(plyr)
username <- "3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix"
password <- "70d0f1455b7dd050452faa5d3650f0907bb98cde87f61fcde0cf57dbca8e3d7e"
item <- GET("https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com")
content(item, encoding = "UTF-8") #interesting, what this line does
http <- "https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com/clemson_data/_all_docs?limit=50&include_docs=true&descending=true"
#http <- "https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com/clemson_data/_all_docs?include_docs=true"
httpResponse <- GET(http, authenticate(username, password))
documents <- fromJSON(toString(content(httpResponse, as = "text" , encoding = "UTF-8")))
data <- documents[[3]]
datavalues <- data[[4]]
# seperate datavalues list into componet vectors
ids <- datavalues[["_id"]]
revs <- datavalues[["_rev"]]
fluxes <- datavalues[["flux"]]
lats <- datavalues[["y-coord"]]
lngs <- datavalues[["x-coord"]]
times <- datavalues[["timestamp"]]
# compose vectors into data frame DONT NEED THESE ANYMORE DONT FOGET WHAT YOU DID JUST NEED TO FIX NAMING AND SHIT
df <- data.frame(datavalues)
colnames(df) <- c("id", "rev", "flux", "lat", "lng", "time")
# remove incomplete rows from the data frame
df <- df[complete.cases(df), ]
# remove rows with invalid coordinates from the dataframe, don't know why these have to be seperate
df <- df[(df$lat >= -90.0), ]
df <- df[(df$lat <= 90.00), ]
df <- df[(df$lng >= -180.0), ]
df <- df[(df$lng <= 180.0), ]
# make a vector with unique coordinates contained in df
ucoors <- data.frame(lat=df$lat, lng=df$lng) %>% unique()
summary(df)
df$time
dates <- strsplit(df$time, " ")
head(dates)
times <- chron(dates[[1:length(dates)]][1], dates[[1:length(dates)]][2])
import(chron)
library(chron)
times <- chron(dates[[1:length(dates)]][1], dates[[1:length(dates)]][2])
head(dates)
unlist(dates)
dates <- unlist(dates)
head(dates)
times <- chron(dates, dates)
head(times)
times
typeof(times[23])
source('~/R/clemson_data.R')
head(times)
View(df)
times <- chron(dates, dates)
source('~/R/clemson_data.R')
source('~/R/clemson_data.R')
library(httr)
library(jsonlite)
library(plyr)
library(chron)
library(magrittr)
username <- "3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix"
password <- "70d0f1455b7dd050452faa5d3650f0907bb98cde87f61fcde0cf57dbca8e3d7e"
item <- GET("https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com")
content(item, encoding = "UTF-8") #interesting, what this line does
http <- "https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com/clemson_data/_all_docs?limit=50&include_docs=true&descending=true"
#http <- "https://3af116fb-a68b-41e3-959b-29d1a83399d9-bluemix.cloudant.com/clemson_data/_all_docs?include_docs=true"
httpResponse <- GET(http, authenticate(username, password))
documents <- fromJSON(toString(content(httpResponse, as = "text" , encoding = "UTF-8")))
data <- documents[[3]]
datavalues <- data[[4]]
# seperate datavalues list into componet vectors
ids <- datavalues[["_id"]]
revs <- datavalues[["_rev"]]
fluxes <- datavalues[["flux"]]
lats <- datavalues[["y-coord"]]
lngs <- datavalues[["x-coord"]]
times <- datavalues[["timestamp"]]
# compose vectors into data frame DONT NEED THESE ANYMORE DONT FOGET WHAT YOU DID JUST NEED TO FIX NAMING AND SHIT
df <- data.frame(datavalues)
colnames(df) <- c("id", "rev", "flux", "lat", "lng", "time")
# remove incomplete rows from the data frame
df <- df[complete.cases(df), ]
# remove rows with invalid coordinates from the dataframe, don't know why these have to be seperate
df <- df[(df$lat >= -90.0), ]
df <- df[(df$lat <= 90.00), ]
df <- df[(df$lng >= -180.0), ]
df <- df[(df$lng <= 180.0), ]
# make a vector with unique coordinates contained in df
ucoors <- data.frame(lat=df$lat, lng=df$lng) %>% unique()
ucoors
df
summary(df)
df$flux <- as.numeric(df$flux)
summary(df)
shiny::runApp('R/clemson_data')
runApp('R/clemson_data')
runApp('R/clemson_data')
library(ggplot2)
class(df$time)
df$time
times <- strsplit(df$time, " ")
times
times <- strsplit(df$time, " ") %>% unlist()
times
summary(times)
times[c(TRUE, FALSE)]
warnings()
times[c(FALSE, TRUE)]
times[c(TRUE, FALSE)]
warnings()
times[c(TRUE, FALSE)]
chrontimes <- chron(times[c(TRUE, FALSE)], times[c(FALSE, TRUE)])
chrontimes
chrontimes <- chron(times[c(TRUE, FALSE)], times[c(FALSE, TRUE)], format = c(dates = "y/m/d", times = "h:m:s"))
chrontimes <- chron(times[c(TRUE, FALSE)], times[c(FALSE, TRUE)], format = c(dates = "Y/m/d", times = "h:m:s"))
posixtime <- as.POSIXct(strptime(df$time, "%Y-%M-%D %h:%m:%s"))
posixtime
chrontimes <- chron(times[c(TRUE, FALSE)], times[c(FALSE, TRUE)], format = c(dates = "Y-m-d", times = "h:m:s"))
chrontimes
class(chrontimes[1])
summary(chrontimes)
View(df4)
ggplot(aes(x = chrontimes, y = df$flux))
runApp('R/clemson_data')
runApp('R/clemson_data')
runApp('R/clemson_data')
shiny::runApp('R/clemson_data')
runApp('R/clemson_data')
runApp('R/clemson_data')
shiny::runApp('R/clemson_data')
